$schema: https://azuremlschemas.azureedge.net/promptflow/latest/Flow.schema.json
inputs:
  candidate_profile:
    type: string
    description: "Candidate information in JSON format"
  program_details:
    type: string
    description: "Program information in JSON format (single program)"
    default: ""
  programs_batch:
    type: string
    description: "Multiple programs information in JSON format (batch processing)"
    default: ""
  use_batch:
    type: string
    description: "Flag to enable batch processing"
    default: "false"
outputs:
  match_result:
    type: object
    reference: ${match_evaluator.output}
  batch_evaluations:
    type: object
    reference: ${batch_evaluator.output}
nodes:
  # Single program evaluation
  - name: match_prompt
    type: llm
    source:
      type: code
      path: match_prompt.jinja2
    inputs:
      candidate: ${inputs.candidate_profile}
      program: ${inputs.program_details}
      deployment_name: gpt-4o-mini
      max_tokens: 800
      temperature: 0.1
    connection: azure_openai_connection
    api: chat
    activate:
      when: ${inputs.use_batch}
      is: "false"
  - name: match_evaluator
    type: python
    source:
      type: code
      path: match_evaluator.py
    inputs:
      llm_response: ${match_prompt.output}
      candidate_data: ${inputs.candidate_profile}
      program_data: ${inputs.program_details}
    activate:
      when: ${inputs.use_batch}
      is: "false"
  # Batch evaluation
  - name: batch_match_prompt
    type: llm
    source:
      type: code
      path: batch_match_prompt.jinja2
    inputs:
      candidate: ${inputs.candidate_profile}
      programs: ${inputs.programs_batch}
      deployment_name: gpt-4o-mini
      max_tokens: 4000
      temperature: 0.1
    connection: azure_openai_connection
    api: chat
    activate:
      when: ${inputs.use_batch}
      is: "true"
  - name: batch_evaluator
    type: python
    source:
      type: code
      path: batch_evaluator.py
    inputs:
      llm_response: ${batch_match_prompt.output}
      candidate_data: ${inputs.candidate_profile}
      programs_data: ${inputs.programs_batch}
    activate:
      when: ${inputs.use_batch}
      is: "true"
environment:
  python_requirements_txt: requirements.txt
